1. f"prepending"
=> return f""
2 .spread operators and rest operators for accessing output from required 
Data structures
=>Eg. *args, **kwargs
4. Use return statements instead of print
=>use return 
5. Declare variables using generics
=> Callable[..., bool], list[Callable]
6. Please use dynamic approach 
=> func_name(positional_functions("default_values"))
7. Use *args and **kwargs for positional arguments in functions 
=> for shallow copy 
8. Name with underscore
=> for naming
9. Always use closure for defining functions 
=> return functions without function call or executions
10. Always use global and local scope
=> use nonlocal and global inspite of using the varibales again and again
11. Use keywords like try, except, while use for loops for each 
=>try: ..... except: ValueError...
12. For generics use Callable, TypeVar, docstrings
=> Keep revising these functions 
13. Frequently use unpacking for lists 
=> after func defs and for returing the proper output
14. Use lambda functions 
=> along with map, reduce and filter 
=> lambda x: x % 2 == 0

15. Function calls with arguments for dynamic approaches instead of input
* 		Len (Length): len("Hello, World!")
* 		Reverse: "Hello, World!"[::-1]
* 		Sort: ''.join(sorted("Hello, World!"))
* 		Split: "Hello, World!".split(", ")
* 		toLowerCase(): "Hello, World!".lower()
* 		toUpperCase(): "Hello, World!".upper()
* 		Join: ", ".join(['Hello', 'World!'])
* 		forEach: for char in "Hello, World!": print(char)
* 		Slice: "Hello, World!"[3:8]
* 		Includes: "World" in "Hello, World!"
* 		Push: "Hello, " + "World!"
* 		Pop: Strings are immutable in Python, so you can't pop characters.
* 		Reduce: from functools import reduce; reduce(lambda x, y: x + y, "Hello, World!")
* 		Ceil: Not applicable for strings.
* 		Floor: Not applicable for strings.
* 		Map: ''.join(map(lambda x: x.upper(), "Hello, World!"))
* 		Filter: ''.join(filter(lambda x: x.isalpha(), "Hello, World!"))
* 		Keys: Not applicable for strings.
* 		Values: Not applicable for strings.
* 		This: In Python, this concept can vary depending on context. In classes or methods, it's usually self, otherwise, it's just the object itself.
